///////////////////////////////////////////////////////////////////////////////
// $Id: main.cpp,v 1.4 2006/03/30 17:11:40 humensky Exp $
//
// Filename : 
// Created  : Tue Mar 19 2002 by Jim Hinton
///////////////////////////////////////////////////////////////////////////////
/** 
 * \mainpage VERITAS High Voltage
 
 * \version 1.8
 * \author Jim Hinton 
 * \author Simon Swordy
 * 
 * \author various fixes by spw to bring it up to gcc 3.2 compliance
 * 
 * \date 28th February 2002
 
 * \section intro Overview
 
 * The files used in the VERITAS High Voltage system are as follows:
 
 *  - \b VHVSystem.cpp   - interface to CAEN HV control
 *  - \b VHVFrame.cpp    - main frame and right hand control panel
 *  - \b VHVControl.cpp  - left hand camera display
 *  - \b VGatherData.cpp - a QThread to get/set HV and current monitor data
 *  - \b VHVData.cpp     - a class to share info. between main process and VGatherData
 *  - \b VStar.cpp       - star and arcs display
 *  - \b astrometry.cpp  - star position functions
 *  - \b main.cpp        - generates a VHVFrame object. 
 *  - \b t*.cpp          - XML communications functions
 *  - \b *.h             - Header file for each function + general settings in VHV.h
 *  - \b LED*.png            - Icons used by VLED in VHVFrame.
 *  - \b tycho_catalog_7mag  - Star catalog complete to 7th magnitude
 *  - \b standard.hv         - Default high voltage and channel mapping file.
 *  - \b moc_*               - Files automatically generated by Qt.
 *  - \b vhv                 - The executable program
 
 * The most important classes are:

 *  - VHVSystem
 *  - VHVFrame
 *  - VHVControl
 *  - VGatherData
 *  - VHVData 

 */

/** \file main.cpp
 *  \brief Main program - instantiates a VHVFrame object
 */
#include <iostream>
#include <cstring>
#include <fstream>
#include <string>

#include <qmainwindow.h>
#include <qapplication.h>
#include <qplatinumstyle.h>
#include <qfont.h>

#include "VHVFrame.h"

using namespace std;

bool kDBLogging[NUMTEL];
bool kAutoResponse[NUMTEL] = { true, true, true, true };
bool kFeedback[NUMTEL] = { true, true, true, true };
bool kOldSchool[NUMTEL] = { false, false, false, false };
bool kRecover = false;
ofstream kLogFile;
bool kStarRestore[NUMTEL] = { false, false, false, false };
bool kFlatField = false;
string kHVFile = "";

char kCurrentsHost[20];
char kIPAddressCrate0[20];
char kIPAddressCrate1[20];
int  kTelescopeID;
bool kActiveTelescope[NUMTEL];

using namespace std;

void printUsage();

/** 
 *    Main program - instantiates a VHVFrame object and waits for the 
 *    user to close all windows before exiting.
*/

int main(int argc, char** argv)
{
//   system( "ipcs -s" );
  system( "/usr/local/veritas/bin/auto_ipcrm.pl" );
//   system( "ipcs -s" );
  for ( int i=0; i<NUMTEL; ++i ) kDBLogging[i] = true;
  for ( int i=0; i<NUMTEL; ++i ) kActiveTelescope[i] = false;

  QApplication app(argc,argv);
  qApp->setStyle(new QPlatinumStyle);
  //qApp->setFont(QFont("times",6,25,FALSE),FALSE,0);
  // Font size changed from "10" to "8" to reduce window size TBH 121803
  qApp->setFont(QFont("helvetica",8,50),FALSE,0);
//   cout << "Thanks! I got " << qApp->argc() << " command-line arguments: " 
//        << endl;
//   for ( int i=0; i<qApp->argc(); i++ ) {
//     cout << "\t" << qApp->argv()[i] << endl;
//   }
//   if ( qApp->argc() == 2 && !strcmp( qApp->argv()[1], "-h" ) ) {
//     cout << "Help!?!  You want help!?!  Ha!" << endl;
//   }
  time_t tmpTime;
  time( &tmpTime );
  char tmpString[200];
  strftime( tmpString, 200,
            "/usr/local/veritas/SP05/hvac/DBLogs/hvaclog%Y%m%d.log",
            gmtime( &tmpTime ) );
  kLogFile.open( tmpString, ios::app );
  cout << "hvac: log filename is " << tmpString << endl;
  strftime( tmpString, 200,
            "log%Y%m%d %T",
            gmtime( &tmpTime ) );
  kLogFile << "hvac started at " << tmpString << "." << endl;

  int i=1;
  while ( i < qApp->argc() ) {
    if ( !strcmp( qApp->argv()[i], "-h" ) ) {
      printUsage();
      exit( 0 );
    } else if ( !strcmp( qApp->argv()[i], "-recover" ) ) {
      kRecover = true;
      cout << "hvac:  " << "Starting in recovery mode" << endl;
    } else if ( !strcmp( qApp->argv()[i], "-nodb" ) ) {
      for ( int i=0; i<NUMTEL; ++i ) {
	kDBLogging[i] = false;
      }
      cout << "hvac:  " 
	   << "Database Logging OFF -- are you sure this is what you want?" 
	   << endl;
    } else if ( !strcmp( qApp->argv()[i], "-noauto" ) ) {
      for ( int i=0; i<NUMTEL; ++i ) {
	kAutoResponse[i] = false;
      }
      cout << "hvac:  " 
	   << "Automatic Response to PMT currents OFF -- be careful!" 
	   << endl;
    } else if ( !strcmp( qApp->argv()[i], "-hvfile" ) ) {
      ++i;
      kHVFile = qApp->argv()[i];
      cout << "hvac:  " << "Reading HV settings from file " << kHVFile
	   << " instead of database." << endl;
    } else {
      printUsage();
      exit( 1 );
    }
    ++i;
  }
  kLogFile << "T1 kDBLogging = " << kDBLogging[0] << endl;
  kLogFile << "T1 kAutoResponse = " << kAutoResponse[0] << endl;
  kLogFile << "kRecover = " << kRecover << endl;
  kLogFile << "T1 kStarRestore = " << kStarRestore[0] << endl;
  kLogFile << "kHVFile = " << kHVFile << endl;

  VHVFrame* frame = new VHVFrame();
  frame->resize(frame->sizeHint());
  
  qApp->setMainWidget(frame);

//   if ( QApplication::desktop()->width() > frame->width() + 10
//        && QApplication::desktop()->height() > frame->height() +30 )
//     frame->show();
  if ( QApplication::desktop()->width() > frame->width() 
       && QApplication::desktop()->height() > frame->height() ) {
    frame->show();
//     cout << "Showing not maximized.  width=" << frame->width()
// 	 << " and height=" << frame->height() << endl;
  } else {
    frame->showMaximized();
//     cout << "Showing maximized.  width=" << frame->width()
// 	 << " and height=" << frame->height() << endl;
  }
  
//   frame->show();
  qApp->setMainWidget(0);
  
  QObject::connect( qApp, SIGNAL(lastWindowClosed()), qApp, SLOT(quit()) );
  
  int appExec = app.exec();
//   delete frame; // for some reason, explicitly deleting frame causes a 
  // crash upon quitting.
  return appExec;
}

void printUsage()
{
  cout << "Command-line options:" << endl;
  cout << "-h:\t\tprint this usage information." << endl;
  cout << "-nodb:\t\tturn database logging off (on by default)." 
       << endl << "Information is still logged to local text files"
       << endl << "in $VHVDIR/DBLogs." << endl;
  cout << "-noauto:\tturn automatic response to high pixel currents off" 
       << endl << "\t\t(on by default)." << endl;
  cout << "-recover:\tstart vhv in recovery mode:  pixel voltage and" 
       << endl << "\t\tpower are read from HV crates, rather than taken" 
       << endl << "\t\tfrom default file.  Useful when vhv crashes in the" 
       << endl << "\t\tmiddle of a run." << endl;
  cout << "-hvfile <filename>:\tread HV settings from <filename> rather "
       << endl << "than from database." << endl;
}








